
balancer_kern_minimal.o:	file format ELF64-BPF

Disassembly of section xdp-balancer:
balancer_ingress:
; int balancer_ingress(struct xdp_md *ctx) {
       0:	bf 18 00 00 00 00 00 00 	r8 = r1
       1:	b7 06 00 00 01 00 00 00 	r6 = 1
; void *data_end = (void *)(long)ctx->data_end;
       2:	61 82 04 00 00 00 00 00 	r2 = *(u32 *)(r8 + 4)
; void *data = (void *)(long)ctx->data;
       3:	61 81 00 00 00 00 00 00 	r1 = *(u32 *)(r8 + 0)
; if (data + nh_off > data_end) {
       4:	bf 13 00 00 00 00 00 00 	r3 = r1
       5:	07 03 00 00 0e 00 00 00 	r3 += 14
       6:	2d 23 03 01 00 00 00 00 	if r3 > r2 goto +259 <LBB0_35>
       7:	b7 06 00 00 02 00 00 00 	r6 = 2
; eth_proto = eth->eth_proto;
       8:	69 13 0c 00 00 00 00 00 	r3 = *(u16 *)(r1 + 12)
; if (eth_proto == BE_ETH_P_IP) {
       9:	55 03 00 01 08 00 00 00 	if r3 != 8 goto +256 <LBB0_35>
      10:	b7 03 00 00 00 00 00 00 	r3 = 0
; struct packet_description pckt = {};
      11:	7b 3a f0 ff 00 00 00 00 	*(u64 *)(r10 - 16) = r3
      12:	7b 3a e8 ff 00 00 00 00 	*(u64 *)(r10 - 24) = r3
      13:	7b 3a e0 ff 00 00 00 00 	*(u64 *)(r10 - 32) = r3
      14:	7b 3a d8 ff 00 00 00 00 	*(u64 *)(r10 - 40) = r3
      15:	7b 3a d0 ff 00 00 00 00 	*(u64 *)(r10 - 48) = r3
      16:	7b 3a c8 ff 00 00 00 00 	*(u64 *)(r10 - 56) = r3
; struct vip_definition vip = {};
      17:	63 3a c0 ff 00 00 00 00 	*(u32 *)(r10 - 64) = r3
      18:	7b 3a b8 ff 00 00 00 00 	*(u64 *)(r10 - 72) = r3
      19:	7b 3a b0 ff 00 00 00 00 	*(u64 *)(r10 - 80) = r3
; __u32 mac_addr_pos = 0;
      20:	63 3a ac ff 00 00 00 00 	*(u32 *)(r10 - 84) = r3
; if (iph + 1 > data_end) {
      21:	bf 13 00 00 00 00 00 00 	r3 = r1
      22:	07 03 00 00 22 00 00 00 	r3 += 34
      23:	b7 06 00 00 01 00 00 00 	r6 = 1
      24:	2d 23 f1 00 00 00 00 00 	if r3 > r2 goto +241 <LBB0_35>
; pckt->tos = iph->tos;
      25:	71 13 0f 00 00 00 00 00 	r3 = *(u8 *)(r1 + 15)
      26:	73 3a f5 ff 00 00 00 00 	*(u8 *)(r10 - 11) = r3
; *protocol = iph->protocol;
      27:	71 13 17 00 00 00 00 00 	r3 = *(u8 *)(r1 + 23)
; pckt->flow.proto = *protocol;
      28:	73 3a ec ff 00 00 00 00 	*(u8 *)(r10 - 20) = r3
; if (iph->frag_off & PCKT_FRAGMENTED) {
      29:	69 14 14 00 00 00 00 00 	r4 = *(u16 *)(r1 + 20)
      30:	57 04 00 00 3f ff 00 00 	r4 &= 65343
      31:	b7 06 00 00 01 00 00 00 	r6 = 1
      32:	55 04 e9 00 00 00 00 00 	if r4 != 0 goto +233 <LBB0_35>
      33:	b7 06 00 00 02 00 00 00 	r6 = 2
; if (*protocol == IPPROTO_ICMP) {
      34:	15 03 e7 00 01 00 00 00 	if r3 == 1 goto +231 <LBB0_35>
      35:	69 19 10 00 00 00 00 00 	r9 = *(u16 *)(r1 + 16)
; pckt->flow.src = iph->saddr;
      36:	61 14 1a 00 00 00 00 00 	r4 = *(u32 *)(r1 + 26)
      37:	63 4a c8 ff 00 00 00 00 	*(u32 *)(r10 - 56) = r4
; pckt->flow.dst = iph->daddr;
      38:	61 14 1e 00 00 00 00 00 	r4 = *(u32 *)(r1 + 30)
      39:	63 4a d8 ff 00 00 00 00 	*(u32 *)(r10 - 40) = r4
      40:	b7 06 00 00 02 00 00 00 	r6 = 2
; if (protocol == IPPROTO_TCP) {
      41:	55 03 e0 00 11 00 00 00 	if r3 != 17 goto +224 <LBB0_35>
; if (udp + 1 > data_end) {
      42:	bf 13 00 00 00 00 00 00 	r3 = r1
      43:	07 03 00 00 2a 00 00 00 	r3 += 42
      44:	b7 06 00 00 01 00 00 00 	r6 = 1
      45:	2d 23 dc 00 00 00 00 00 	if r3 > r2 goto +220 <LBB0_35>
; pckt->flow.port16[0] = udp->source;
      46:	69 12 22 00 00 00 00 00 	r2 = *(u16 *)(r1 + 34)
      47:	6b 2a e8 ff 00 00 00 00 	*(u16 *)(r10 - 24) = r2
; pckt->flow.port16[1] = udp->dest;
      48:	69 11 24 00 00 00 00 00 	r1 = *(u16 *)(r1 + 36)
      49:	b7 02 00 00 11 00 00 00 	r2 = 17
; vip.proto = pckt.flow.proto;
      50:	73 2a c2 ff 00 00 00 00 	*(u8 *)(r10 - 62) = r2
; vip.vip = pckt.flow.dst;
      51:	63 4a b0 ff 00 00 00 00 	*(u32 *)(r10 - 80) = r4
; vip.port = pckt.flow.port16[1];
      52:	6b 1a c0 ff 00 00 00 00 	*(u16 *)(r10 - 64) = r1
; pckt->flow.port16[1] = udp->dest;
      53:	6b 1a ea ff 00 00 00 00 	*(u16 *)(r10 - 22) = r1
      54:	bf a2 00 00 00 00 00 00 	r2 = r10
; struct packet_description pckt = {};
      55:	07 02 00 00 b0 ff ff ff 	r2 += -80
; vip_info = bpf_map_lookup_elem(&vip_map, &vip); //XXX MAPPA
      56:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      58:	85 00 00 00 01 00 00 00 	call 1
      59:	bf 07 00 00 00 00 00 00 	r7 = r0
; if (!vip_info) { 
      60:	55 07 0a 00 00 00 00 00 	if r7 != 0 goto +10 <LBB0_9>
      61:	b7 01 00 00 00 00 00 00 	r1 = 0
; vip.port = 0;
      62:	6b 1a c0 ff 00 00 00 00 	*(u16 *)(r10 - 64) = r1
      63:	bf a2 00 00 00 00 00 00 	r2 = r10
      64:	07 02 00 00 b0 ff ff ff 	r2 += -80
; vip_info = bpf_map_lookup_elem(&vip_map, &vip);
      65:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      67:	85 00 00 00 01 00 00 00 	call 1
      68:	bf 07 00 00 00 00 00 00 	r7 = r0
      69:	b7 06 00 00 02 00 00 00 	r6 = 2
; if (!vip_info) {
      70:	15 07 c3 00 00 00 00 00 	if r7 == 0 goto +195 <LBB0_35>

LBB0_9:
      71:	b7 01 00 00 00 02 00 00 	r1 = 512
; __u32 stats_key = MAX_VIPS + LRU_CNTRS;
      72:	63 1a a8 ff 00 00 00 00 	*(u32 *)(r10 - 88) = r1
      73:	bf a2 00 00 00 00 00 00 	r2 = r10
; struct vip_meta *vip_info;
      74:	07 02 00 00 a8 ff ff ff 	r2 += -88
; data_stats = bpf_map_lookup_elem(&stats, &stats_key); //XXX MAPPA
      75:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      77:	85 00 00 00 01 00 00 00 	call 1
      78:	b7 06 00 00 01 00 00 00 	r6 = 1
; if (!data_stats) {
      79:	15 00 ba 00 00 00 00 00 	if r0 == 0 goto +186 <LBB0_35>
; data_stats->v1 += 1;
      80:	79 01 00 00 00 00 00 00 	r1 = *(u64 *)(r0 + 0)
      81:	07 01 00 00 01 00 00 00 	r1 += 1
      82:	7b 10 00 00 00 00 00 00 	*(u64 *)(r0 + 0) = r1
; if ((vip_info->flags & F_HASH_NO_SRC_PORT)) {
      83:	71 71 00 00 00 00 00 00 	r1 = *(u8 *)(r7 + 0)
      84:	57 01 00 00 01 00 00 00 	r1 &= 1
      85:	15 01 02 00 00 00 00 00 	if r1 == 0 goto +2 <LBB0_12>
      86:	b7 01 00 00 00 00 00 00 	r1 = 0
; pckt.flow.port16[0] = 0;
      87:	6b 1a e8 ff 00 00 00 00 	*(u16 *)(r10 - 24) = r1

LBB0_12:
; __u32 cpu_num = bpf_get_smp_processor_id(); //XXX HELPER
      88:	85 00 00 00 08 00 00 00 	call 8
      89:	63 0a a4 ff 00 00 00 00 	*(u32 *)(r10 - 92) = r0
      90:	bf a2 00 00 00 00 00 00 	r2 = r10
      91:	07 02 00 00 a4 ff ff ff 	r2 += -92
; void *lru_map = bpf_map_lookup_elem(&lru_maps_mapping, &cpu_num); //XXX MAPPA
      92:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
      94:	85 00 00 00 01 00 00 00 	call 1
; if (!lru_map) {
      95:	15 00 aa 00 00 00 00 00 	if r0 == 0 goto +170 <LBB0_35>
; if (!(pckt.flags & F_SYN_SET) &&
      96:	71 a1 f4 ff 00 00 00 00 	r1 = *(u8 *)(r10 - 12)
      97:	57 01 00 00 02 00 00 00 	r1 &= 2
      98:	55 01 a7 00 00 00 00 00 	if r1 != 0 goto +167 <LBB0_35>
; !(vip_info->flags & F_LRU_BYPASS)) {
      99:	71 71 00 00 00 00 00 00 	r1 = *(u8 *)(r7 + 0)
     100:	57 01 00 00 02 00 00 00 	r1 &= 2
; if (!(pckt.flags & F_SYN_SET) &&
     101:	55 01 a4 00 00 00 00 00 	if r1 != 0 goto +164 <LBB0_35>
     102:	bf a2 00 00 00 00 00 00 	r2 = r10
; struct packet_description *pckt,
     103:	07 02 00 00 c8 ff ff ff 	r2 += -56
; dst_lru = bpf_map_lookup_elem(lru_map, &pckt->flow); //XXX MAPPA  
     104:	bf 01 00 00 00 00 00 00 	r1 = r0
     105:	85 00 00 00 01 00 00 00 	call 1
; if (!dst_lru) {
     106:	55 00 01 00 00 00 00 00 	if r0 != 0 goto +1 <LBB0_17>
     107:	05 00 9e 00 00 00 00 00 	goto +158 <LBB0_35>

LBB0_17:
; if (pckt->flow.proto == IPPROTO_UDP) {
     108:	71 a1 ec ff 00 00 00 00 	r1 = *(u8 *)(r10 - 20)
     109:	55 01 05 00 11 00 00 00 	if r1 != 17 goto +5 <LBB0_19>
     110:	7b 0a 98 ff 00 00 00 00 	*(u64 *)(r10 - 104) = r0
; cur_time = bpf_ktime_get_ns(); //XXX HELPER
     111:	85 00 00 00 05 00 00 00 	call 5
; dst_lru->atime = cur_time;
     112:	79 a1 98 ff 00 00 00 00 	r1 = *(u64 *)(r10 - 104)
     113:	7b 01 08 00 00 00 00 00 	*(u64 *)(r1 + 8) = r0
     114:	79 a0 98 ff 00 00 00 00 	r0 = *(u64 *)(r10 - 104)

LBB0_19:
; key = dst_lru->pos;
     115:	61 01 00 00 00 00 00 00 	r1 = *(u32 *)(r0 + 0)
; pckt->real_index = key;
     116:	63 1a f0 ff 00 00 00 00 	*(u32 *)(r10 - 16) = r1
; key = dst_lru->pos;
     117:	63 1a fc ff 00 00 00 00 	*(u32 *)(r10 - 4) = r1
     118:	bf a2 00 00 00 00 00 00 	r2 = r10
     119:	07 02 00 00 fc ff ff ff 	r2 += -4
; *real = bpf_map_lookup_elem(&reals, &key); //XXX MAPPA
     120:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
     122:	85 00 00 00 01 00 00 00 	call 1
     123:	7b 0a 98 ff 00 00 00 00 	*(u64 *)(r10 - 104) = r0
     124:	15 00 8d 00 00 00 00 00 	if r0 == 0 goto +141 <LBB0_35>
     125:	bf a2 00 00 00 00 00 00 	r2 = r10
; cval = bpf_map_lookup_elem(&ctl_array, &mac_addr_pos); //XXX MAPPA
     126:	07 02 00 00 ac ff ff ff 	r2 += -84
     127:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
     129:	85 00 00 00 01 00 00 00 	call 1
     130:	7b 0a 90 ff 00 00 00 00 	*(u64 *)(r10 - 112) = r0
; if (!cval) {
     131:	15 00 86 00 00 00 00 00 	if r0 == 0 goto +134 <LBB0_35>
; if (dst->flags & F_IPV6) {
     132:	79 a1 98 ff 00 00 00 00 	r1 = *(u64 *)(r10 - 104)
     133:	71 11 10 00 00 00 00 00 	r1 = *(u8 *)(r1 + 16)
     134:	57 01 00 00 01 00 00 00 	r1 &= 1
     135:	55 01 82 00 00 00 00 00 	if r1 != 0 goto +130 <LBB0_35>
; __u32 ip_suffix = bpf_htons(pckt->flow.port16[0]); //XXX HELPER
     136:	69 a1 e8 ff 00 00 00 00 	r1 = *(u16 *)(r10 - 24)
; ip_suffix ^= pckt->flow.src;
     137:	7b 1a 88 ff 00 00 00 00 	*(u64 *)(r10 - 120) = r1
     138:	61 a1 c8 ff 00 00 00 00 	r1 = *(u32 *)(r10 - 56)
; if (bpf_xdp_adjust_head(xdp, 0 - (int)sizeof(struct iphdr))) { //XXX HELPER
     139:	7b 1a 80 ff 00 00 00 00 	*(u64 *)(r10 - 128) = r1
     140:	bf 81 00 00 00 00 00 00 	r1 = r8
     141:	18 02 00 00 ec ff ff ff 00 00 00 00 00 00 00 00 	r2 = 4294967276 ll
     143:	85 00 00 00 2c 00 00 00 	call 44
     144:	67 00 00 00 20 00 00 00 	r0 <<= 32
     145:	77 00 00 00 20 00 00 00 	r0 >>= 32
     146:	55 00 77 00 00 00 00 00 	if r0 != 0 goto +119 <LBB0_35>
; data = (void*)(long)xdp->data;
     147:	61 81 00 00 00 00 00 00 	r1 = *(u32 *)(r8 + 0)
; data_end = (void*)(long)xdp->data_end;
     148:	61 82 04 00 00 00 00 00 	r2 = *(u32 *)(r8 + 4)
; if (new_eth + 1 > data_end || old_eth + 1 > data_end || iph + 1 > data_end) {
     149:	bf 13 00 00 00 00 00 00 	r3 = r1
     150:	07 03 00 00 0e 00 00 00 	r3 += 14
     151:	2d 23 72 00 00 00 00 00 	if r3 > r2 goto +114 <LBB0_35>
     152:	bf 13 00 00 00 00 00 00 	r3 = r1
     153:	07 03 00 00 22 00 00 00 	r3 += 34
     154:	2d 23 6f 00 00 00 00 00 	if r3 > r2 goto +111 <LBB0_35>
     155:	2d 23 6e 00 00 00 00 00 	if r3 > r2 goto +110 <LBB0_35>
     156:	dc 09 00 00 10 00 00 00 	r9 = be16 r9
     157:	79 a0 88 ff 00 00 00 00 	r0 = *(u64 *)(r10 - 120)
     158:	dc 00 00 00 20 00 00 00 	r0 = be32 r0
     159:	18 02 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 	r2 = 4294901760 ll
     161:	5f 20 00 00 00 00 00 00 	r0 &= r2
     162:	bf 12 00 00 00 00 00 00 	r2 = r1
     163:	07 02 00 00 14 00 00 00 	r2 += 20
     164:	79 a4 90 ff 00 00 00 00 	r4 = *(u64 *)(r10 - 112)
; memcpy(new_eth->eth_dest, cval->mac, 6);
     165:	69 43 04 00 00 00 00 00 	r3 = *(u16 *)(r4 + 4)
     166:	6b 31 04 00 00 00 00 00 	*(u16 *)(r1 + 4) = r3
     167:	69 43 02 00 00 00 00 00 	r3 = *(u16 *)(r4 + 2)
     168:	6b 31 02 00 00 00 00 00 	*(u16 *)(r1 + 2) = r3
     169:	69 43 00 00 00 00 00 00 	r3 = *(u16 *)(r4 + 0)
     170:	6b 31 00 00 00 00 00 00 	*(u16 *)(r1 + 0) = r3
; memcpy(new_eth->eth_source, old_eth->eth_dest, 6);
     171:	69 23 00 00 00 00 00 00 	r3 = *(u16 *)(r2 + 0)
     172:	69 24 02 00 00 00 00 00 	r4 = *(u16 *)(r2 + 2)
     173:	69 22 04 00 00 00 00 00 	r2 = *(u16 *)(r2 + 4)
     174:	b7 05 00 00 08 00 00 00 	r5 = 8
; new_eth->eth_proto = BE_ETH_P_IP;
     175:	6b 51 0c 00 00 00 00 00 	*(u16 *)(r1 + 12) = r5
; memcpy(new_eth->eth_source, old_eth->eth_dest, 6);
     176:	6b 21 0a 00 00 00 00 00 	*(u16 *)(r1 + 10) = r2
     177:	6b 41 08 00 00 00 00 00 	*(u16 *)(r1 + 8) = r4
     178:	6b 31 06 00 00 00 00 00 	*(u16 *)(r1 + 6) = r3
     179:	79 a2 80 ff 00 00 00 00 	r2 = *(u64 *)(r10 - 128)
; ((0xFFFF0000 & ip_suffix) | IPIP_V4_PREFIX),
     180:	57 02 00 00 00 00 ff ff 	r2 &= -65536
     181:	af 20 00 00 00 00 00 00 	r0 ^= r2
; dst->dst,
     182:	79 a2 98 ff 00 00 00 00 	r2 = *(u64 *)(r10 - 104)
     183:	61 23 00 00 00 00 00 00 	r3 = *(u32 *)(r2 + 0)
; pckt->tos,
     184:	71 a2 f5 ff 00 00 00 00 	r2 = *(u8 *)(r10 - 11)
     185:	b7 04 00 00 45 00 00 00 	r4 = 69
; iph->ihl = 5;
     186:	73 41 0e 00 00 00 00 00 	*(u8 *)(r1 + 14) = r4
; iph->tos = tos;
     187:	73 21 0f 00 00 00 00 00 	*(u8 *)(r1 + 15) = r2
     188:	b7 02 00 00 40 04 00 00 	r2 = 1088
; iph->ttl = DEFAULT_TTL;
     189:	6b 21 16 00 00 00 00 00 	*(u16 *)(r1 + 22) = r2
     190:	b7 02 00 00 00 00 00 00 	r2 = 0
; iph->frag_off = 0;
     191:	6b 21 14 00 00 00 00 00 	*(u16 *)(r1 + 20) = r2
     192:	18 02 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 	r2 = 4294901760 ll
; ((0xFFFF0000 & ip_suffix) | IPIP_V4_PREFIX),
     194:	bf 04 00 00 00 00 00 00 	r4 = r0
     195:	5f 24 00 00 00 00 00 00 	r4 &= r2
; *csum += *next_iph_u16++;
     196:	77 04 00 00 10 00 00 00 	r4 >>= 16
; iph->tot_len = bpf_htons(pkt_bytes + sizeof(struct iphdr));
     197:	bf 92 00 00 00 00 00 00 	r2 = r9
     198:	07 02 00 00 14 00 00 00 	r2 += 20
     199:	dc 02 00 00 10 00 00 00 	r2 = be16 r2
     200:	6b 21 10 00 00 00 00 00 	*(u16 *)(r1 + 16) = r2
; *csum += *next_iph_u16++;
     201:	0f 42 00 00 00 00 00 00 	r2 += r4
; ((0xFFFF0000 & ip_suffix) | IPIP_V4_PREFIX),
     202:	47 00 00 00 ac 10 00 00 	r0 |= 4268
; iph->saddr = saddr;
     203:	63 01 1a 00 00 00 00 00 	*(u32 *)(r1 + 26) = r0
; *csum += *next_iph_u16++;
     204:	bf 34 00 00 00 00 00 00 	r4 = r3
     205:	57 04 00 00 ff ff 00 00 	r4 &= 65535
     206:	0f 42 00 00 00 00 00 00 	r2 += r4
; iph->daddr = daddr;
     207:	63 31 1e 00 00 00 00 00 	*(u32 *)(r1 + 30) = r3
; *csum += *next_iph_u16++;
     208:	77 03 00 00 10 00 00 00 	r3 >>= 16
     209:	0f 32 00 00 00 00 00 00 	r2 += r3
     210:	69 13 0e 00 00 00 00 00 	r3 = *(u16 *)(r1 + 14)
     211:	0f 32 00 00 00 00 00 00 	r2 += r3
     212:	69 13 12 00 00 00 00 00 	r3 = *(u16 *)(r1 + 18)
     213:	0f 32 00 00 00 00 00 00 	r2 += r3
     214:	69 13 16 00 00 00 00 00 	r3 = *(u16 *)(r1 + 22)
     215:	0f 32 00 00 00 00 00 00 	r2 += r3
     216:	07 02 00 00 ac 10 00 00 	r2 += 4268
; if (csum >> 16)
     217:	bf 23 00 00 00 00 00 00 	r3 = r2
     218:	77 03 00 00 10 00 00 00 	r3 >>= 16
     219:	15 03 02 00 00 00 00 00 	if r3 == 0 goto +2 <LBB0_28>
     220:	57 02 00 00 ff ff 00 00 	r2 &= 65535
     221:	0f 32 00 00 00 00 00 00 	r2 += r3

LBB0_28:
     222:	bf 23 00 00 00 00 00 00 	r3 = r2
     223:	77 03 00 00 10 00 00 00 	r3 >>= 16
     224:	15 03 02 00 00 00 00 00 	if r3 == 0 goto +2 <LBB0_30>
     225:	57 02 00 00 ff ff 00 00 	r2 &= 65535
     226:	0f 32 00 00 00 00 00 00 	r2 += r3

LBB0_30:
     227:	bf 23 00 00 00 00 00 00 	r3 = r2
     228:	77 03 00 00 10 00 00 00 	r3 >>= 16
     229:	15 03 02 00 00 00 00 00 	if r3 == 0 goto +2 <LBB0_32>
     230:	57 02 00 00 ff ff 00 00 	r2 &= 65535
     231:	0f 32 00 00 00 00 00 00 	r2 += r3

LBB0_32:
     232:	bf 23 00 00 00 00 00 00 	r3 = r2
     233:	77 03 00 00 10 00 00 00 	r3 >>= 16
     234:	0f 23 00 00 00 00 00 00 	r3 += r2
; iph->check = csum;
     235:	a7 03 00 00 ff ff ff ff 	r3 ^= -1
     236:	6b 31 18 00 00 00 00 00 	*(u16 *)(r1 + 24) = r3
; vip_num = vip_info->vip_num;
     237:	61 71 04 00 00 00 00 00 	r1 = *(u32 *)(r7 + 4)
     238:	63 1a fc ff 00 00 00 00 	*(u32 *)(r10 - 4) = r1
     239:	bf a2 00 00 00 00 00 00 	r2 = r10
; static inline __u16 csum_fold_helper(__u64 csum) {
     240:	07 02 00 00 fc ff ff ff 	r2 += -4
; data_stats = bpf_map_lookup_elem(&stats, &vip_num); //XXX MAPPA
     241:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
     243:	85 00 00 00 01 00 00 00 	call 1
; if (!data_stats) {
     244:	15 00 15 00 00 00 00 00 	if r0 == 0 goto +21 <LBB0_35>
; data_stats->v1 += 1;
     245:	bf a2 00 00 00 00 00 00 	r2 = r10
     246:	07 02 00 00 f0 ff ff ff 	r2 += -16
     247:	79 01 08 00 00 00 00 00 	r1 = *(u64 *)(r0 + 8)
     248:	bf 93 00 00 00 00 00 00 	r3 = r9
     249:	0f 13 00 00 00 00 00 00 	r3 += r1
     250:	7b 30 08 00 00 00 00 00 	*(u64 *)(r0 + 8) = r3
     251:	79 01 00 00 00 00 00 00 	r1 = *(u64 *)(r0 + 0)
     252:	07 01 00 00 01 00 00 00 	r1 += 1
     253:	7b 10 00 00 00 00 00 00 	*(u64 *)(r0 + 0) = r1
; data_stats = bpf_map_lookup_elem(&reals_stats, &pckt.real_index); //XXX MAPPA
     254:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 	r1 = 0 ll
     256:	85 00 00 00 01 00 00 00 	call 1
     257:	b7 06 00 00 01 00 00 00 	r6 = 1
; if (!data_stats) {
     258:	15 00 07 00 00 00 00 00 	if r0 == 0 goto +7 <LBB0_35>
; data_stats->v1 += 1;
     259:	79 01 08 00 00 00 00 00 	r1 = *(u64 *)(r0 + 8)
     260:	0f 19 00 00 00 00 00 00 	r9 += r1
     261:	7b 90 08 00 00 00 00 00 	*(u64 *)(r0 + 8) = r9
     262:	79 01 00 00 00 00 00 00 	r1 = *(u64 *)(r0 + 0)
     263:	0f 16 00 00 00 00 00 00 	r6 += r1
     264:	7b 60 00 00 00 00 00 00 	*(u64 *)(r0 + 0) = r6
     265:	b7 06 00 00 03 00 00 00 	r6 = 3

LBB0_35:
; }
     266:	bf 60 00 00 00 00 00 00 	r0 = r6
     267:	95 00 00 00 00 00 00 00 	exit
